{"version":3,"sources":["components/Pizza.js","components/EditList.js","components/getItems.js","components/AllCustomers.js","App.js","reportWebVitals.js","index.js"],"names":["getFormattedPrice","price","parseInt","toFixed","App","props","useState","Array","data","length","fill","checkedState","setCheckedState","quantity","setQuantity","total","setTotal","purchasedItems","setPurchasedItems","settingPrice","updatedCheckedState","newPurchasedItems","totalPrice","reduce","sum","currentState","index","push","name","setData","className","pt","width","align","spacing","type","placeholder","onChange","e","event","newData","target","value","handleName","handleTelephone","handleEmail","map","id","checked","position","item","handleOnChange","htmlFor","icon","faChevronLeft","onClick","newQuantity","handleQuantityDecrease","faChevronRight","handleQuantityIncrease","colorScheme","size","myObjStr","JSON","stringify","fetch","method","headers","body","then","response","json","handleSubmit","count","setCount","billdata","customer_name","contact_no","email","Postdata","newCheckState","i","purchased_items_obj","product_name","product_price","UpdatingCheckState_UpdatingQuantity","console","log","requestOptions","item_id","getItem","state","loading","itemData","billData","link_id","this","setState","window","location","pathname","slice","Promise","all","res","urlOneData","urlTwoData","text","Component","Table","employees","setEmployees","useEffect","getData","a","axios","get","mb","href","key","toUpperCase","to","prodIndex","preventDefault","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deec47ef.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Input,\n         Stack,\n         Center,\n         Button,\n } from \"@chakra-ui/react\"\nimport \"./Pizza.css\";\n\nconst getFormattedPrice = (price) => `â‚¹${parseInt(price).toFixed(2)}`;\n\n\nexport default function App(props) {\n    const [checkedState, setCheckedState] = useState(\n        new Array(props.data.length).fill(false)\n    );\n\n    const [quantity, setQuantity] = useState(\n        new Array(props.data.length).fill(1)\n    );\n\n    const [total, setTotal] = useState(0);\n\n    const [purchasedItems, setPurchasedItems] = useState([]);\n\n    function settingPrice(updatedCheckedState) {\n\n        setPurchasedItems([]);\n        var newPurchasedItems = []\n        const totalPrice = updatedCheckedState.reduce(\n            (sum, currentState, index) => {\n                \n                if (currentState === true) {\n                    newPurchasedItems.push(\n                        {\n                            \"product_name\": props.data[index].name,\n                            \"product_price\": props.data[index].price,\n                            \"quantity\": quantity[index]\n                        }\n                    )\n                    setPurchasedItems(newPurchasedItems)\n                    return parseInt(sum) + parseInt(props.data[index].price) * parseInt(quantity[index]);\n                }\n                return sum;\n            },\n            0\n          );\n        setTotal(totalPrice);\n    }\n\n    const handleOnChange = (position) => {\n        const updatedCheckedState = checkedState.map((item, index) =>\n          index === position ? !item : item\n        );\n        setCheckedState(updatedCheckedState);\n        settingPrice(updatedCheckedState);\n    };\n\n    const handleQuantityIncrease = (index) => {\n        \n\t\tconst newQuantity = quantity;\n\t\tnewQuantity[index] = newQuantity[index] + 1;\n\n\t\tsetQuantity(newQuantity);\n        settingPrice(checkedState);\n\t\t\n\t};\n\n    const handleQuantityDecrease = (index) => {\n\n        if (quantity[index] > 1) {\n            const newQuantity = [...quantity];\n\n            newQuantity[index]--;\n\n            setQuantity(newQuantity);\n        }\n        settingPrice(checkedState);\n            \n\t};\n\n    const [data, setData] = useState({\n        \"purchased_items_obj\": [],\n        \"customer_name\": \"Unknown\",\n        \"contact_no\": 1234567899,\n        \"email\": \"\",\n        \"total_amount\": total\n    }\n        \n    );\n\n    const handleName = (event) => {\n        const newData = data\n        newData[\"customer_name\"] = event.target.value;\n        setData(newData)\n    }\n    const handleTelephone = (event) => {\n        const newData = data\n        newData[\"contact_no\"] = event.target.value;\n        setData(newData)\n    }\n    const handleEmail = (event) => {\n        const newData = data\n        newData[\"email\"] = event.target.value;\n        setData(newData)\n    }\n\n    const handleSubmit = (event) => {\n        const newData= data\n        newData[\"total_amount\"] = total;\n\n        newData[\"purchased_items_obj\"] = purchasedItems;\n        setData(newData)\n        const myObjStr = JSON.stringify(data);\n        // console.log(myObjStr);\n\n        const requestOptions = {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: myObjStr\n        };\n        fetch(\"https://invoice-generator-django.herokuapp.com/api/AddCustomer/\", requestOptions)\n            .then(response => response.json()) \n            \n        // window.location.href='/'\n    }\n\n    \n\n    return (\n        <div className=\"App\">\n            <Center pt={10}>\n                <Stack width={450} align=\"center\" spacing={2}>\n                    <Input type=\"text\" placeholder=\"Name\" onChange={(e) => handleName(e)} />\n                    <Input type=\"tel\" placeholder=\"Phone number\" onChange={(e) => handleTelephone(e)}/>\n                    <Input placeholder=\"Enter email\" onChange={(e) => handleEmail(e)}/>\n                </Stack>\n            </Center>\n\n            <h2><strong>Available Items</strong></h2>\n            <ul className=\"shopping-list\">\n                {props.data.map(({ name, price }, index) => {\n                return (\n                    <li key={index}>\n                    <div className=\"shopping-list-item\">\n                        <div className=\"left-section\">\n                        <input\n                            type=\"checkbox\"\n                            id={`custom-checkbox-${index}`}\n                            name={name}\n                            value={name}\n                            checked={checkedState[index]}\n                            onChange={() => handleOnChange(index, name, price)}\n                        />\n                        <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                        </div>\n\n                        <div className=\"right-section\">{getFormattedPrice(price)}</div>\n                        \n                        <div className='right-section'>\n                            <button>        \n                                <FontAwesomeIcon icon={faChevronLeft}  onClick={() => handleQuantityDecrease(index, name, price)} />\n                            </button>\n                            <span> {quantity[index]} </span>\n                            <button>\n                                <FontAwesomeIcon icon={faChevronRight} onClick={() => handleQuantityIncrease(index, name, price)} />\n                            </button>\n                        </div>\n                        \n                    </div>\n                    </li>\n                );\n                })}\n                <li>\n                    <div className=\"shopping-list-item\">\n                        <div className=\"left-section\">Total:</div>\n                        <div className=\"right-section\">{getFormattedPrice(total)}</div>\n                    </div>\n                </li>\n            </ul>\n            <Button colorScheme=\"teal\" size=\"lg\" type=\"submit\" onClick={(e) => handleSubmit(e)}>\n                Save\n            </Button>\n        {/* </form> */}\n        </div>\n    );\n}\n","import { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Button } from \"@chakra-ui/react\"\nimport \"./Pizza.css\";\n\n\nconst getFormattedPrice = (price) => `â‚¹${parseInt(price).toFixed(2)}`;\n\n\nexport default function App(props) {\n    const [checkedState, setCheckedState] = useState(\n        new Array(props.data.length).fill(false)\n    );\n\n    const [count, setCount] = useState(props.count)\n\n    const [quantity, setQuantity] = useState(\n        new Array(props.data.length).fill(1)\n    );\n\n    const [total, setTotal] = useState(0);\n\n    const [purchasedItems, setPurchasedItems] = useState([]);\n    \n    function settingPrice(updatedCheckedState, quantity) {\n\n        setPurchasedItems([]);\n        var newPurchasedItems = []\n        const totalPrice = updatedCheckedState.reduce(\n            (sum, currentState, index) => {\n                \n                if (currentState === true) {\n                    newPurchasedItems.push(\n                        {\n                            \"product_name\": props.data[index].name,\n                            \"product_price\": props.data[index].price,\n                            \"quantity\": quantity[index]\n                        }\n                    )\n                    setPurchasedItems(newPurchasedItems)\n                    return parseInt(sum) + parseInt(props.data[index].price) * parseInt(quantity[index]);\n                }\n                return sum;\n            },\n            0\n          );\n        setTotal(totalPrice);\n    }\n\n    const handleOnChange = (position) => {\n        const updatedCheckedState = checkedState.map((item, index) =>\n          index === position ? !item : item\n        );\n        setCheckedState(updatedCheckedState);\n        settingPrice(updatedCheckedState, quantity);\n    };\n\n    const handleQuantityIncrease = (index) => {\n        \n\t\tconst newQuantity = quantity;\n\t\tnewQuantity[index] = newQuantity[index] + 1;\n\n\t\tsetQuantity(newQuantity);\n        settingPrice(checkedState, quantity);\n\t\t\n\t};\n\n    const handleQuantityDecrease = (index) => {\n        if (quantity[index] > 1) {\n            const newQuantity = quantity;\n            newQuantity[index] = newQuantity[index] - 1;\n\n            setQuantity(newQuantity);\n            settingPrice(checkedState, quantity);\n        }   \n\t};\n\n    const [data, setData] = useState({\n        \"purchased_items_obj\": [],\n        \"customer_name\": `${props.billdata.customer_name}`,\n        \"contact_no\": `${props.billdata.contact_no}`,\n        \"email\": `${props.billdata.email}`,\n        \"total_amount\": total\n    });\n\n    const UpdatingCheckState_UpdatingQuantity = (Postdata) => {\n        let newCheckState = Array(props.data.length).fill(false)\n        let newQuantity = Array(props.data.length).fill(1)\n\n        // eslint-disable-next-line\n        props.data.map(({ name, price }, index) => {setQuantity(newQuantity)\n            for (let i = 0; i < Postdata.purchased_items_obj.length; i++) {\n                if (Postdata.purchased_items_obj[i].product_name === name && Postdata.purchased_items_obj[i].product_price === price ) {\n                    newCheckState[index] = true\n                    newQuantity[index] = Postdata.purchased_items_obj[i].quantity\n                }\n            }\n        })\n        setCheckedState(newCheckState)\n        setQuantity(newQuantity)\n        settingPrice(newCheckState, newQuantity)\n    }\n\n    if (count === \"1\") {\n        UpdatingCheckState_UpdatingQuantity(props.billdata)\n        setCount(\"0\")\n    }\n \n    const handleSubmit = (event) => {\n        const newData= data\n        newData[\"total_amount\"] = total;\n        newData[\"purchased_items_obj\"] = purchasedItems;\n        setData(newData)\n\n    \n        const myObjStr = JSON.stringify(data);\n        console.log(myObjStr)\n\n        const requestOptions = {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: myObjStr\n        };\n        fetch(`https://invoice-generator-django.herokuapp.com/api/edit-bill/${props.item_id}/`, requestOptions)\n            .then(response => response.json())\n            \n        // window.location.href='/'\n    }\n\n    \n\n    return (\n        <div className=\"App\">\n\n            <h2><strong>Update Items</strong></h2>\n            \n            <ul className=\"shopping-list\">\n                {props.data.map(({ name, price }, index) => {\n                return (\n                    <li key={index}>\n                    <div className=\"shopping-list-item\">\n                        <div className=\"left-section\">\n                        <input\n                            type=\"checkbox\"\n                            id={`custom-checkbox-${index}`}\n                            name={name}\n                            value={name}\n                            checked={checkedState[index]}\n                            onChange={() => handleOnChange(index, name, price)}\n                        />\n                        <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                        </div>\n\n                        <div className=\"right-section\">{getFormattedPrice(price)}</div>\n                        \n                        <div className='right-section'>\n                            <button>        \n                                <FontAwesomeIcon icon={faChevronLeft}  onClick={() => handleQuantityDecrease(index, name, price)} />\n                            </button>\n                            <span> {quantity[index]} </span>\n                            <button>\n                                <FontAwesomeIcon icon={faChevronRight} onClick={() => handleQuantityIncrease(index, name, price)} />\n                            </button>\n                        </div>\n                        \n                    </div>\n                    </li>\n                );\n                })}\n                <li>\n                    <div className=\"shopping-list-item\">\n                        <div className=\"left-section\">Total:</div>\n                        <div className=\"right-section\">{getFormattedPrice(total)}</div>\n                    </div>\n                </li>\n            </ul>\n            <Button colorScheme=\"teal\" size=\"lg\" type=\"submit\" onClick={(e) => handleSubmit(e)}>\n                Save\n            </Button>\n        {/* </form> */}\n        </div>\n    );\n}\n","import React, { Component } from 'react'\nimport PizzaDisplay from './Pizza'\nimport EditItems from './EditList'\n\n\nclass getItem extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loading: false,\n            itemData: [],\n            billData: [],\n            link_id: \"\"\n        }\n    }\n\n    UNSAFE_componentWillMount() {\n        this.setState({loading: true})\n\n        if (this.props.method === \"PUT\") {\n            const link_id = (window.location.pathname).slice(6)\n\n            Promise.all([\n                fetch( `https://invoice-generator-django.herokuapp.com/api/view-bill/${link_id}/`).then(res => res.json()),\n                fetch(\"https://invoice-generator-django.herokuapp.com/getItems/\").then(res => res.json())\n            ]).then(([urlOneData, urlTwoData]) => {\n                this.setState({\n                    loading: false,\n                    itemData: urlTwoData,\n                    billData: urlOneData,\n                    link_id: link_id\n                });\n            })\n        }\n        else {\n            fetch(\"https://invoice-generator-django.herokuapp.com/getItems/\")\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    loading: false,\n                    itemData: data\n                })\n            })\n        }        \n    }\n\n    render() {\n        let text\n        if (this.state.loading) {\n            text = \"loading...\"\n        }\n        else {\n            if (this.props.method === \"PUT\" ) {\n                text = <EditItems data={this.state.itemData} billdata={this.state.billData} method=\"PUT\" item_id={this.state.link_id} count=\"1\"/>\n            }\n            else {\n                text = <PizzaDisplay data={this.state.itemData} method=\"GET\" />\n            }\n        }\n\n        return (\n            <div>\n                {text}\n            </div>\n        )\n    }\n}\n\nexport default getItem","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './AllCustomers.css'\n\nimport { \n    Button,\n} from \"@chakra-ui/react\"\n\nimport {\n    Link\n  } from \"react-router-dom\";\n\nconst URL = 'https://invoice-generator-django.herokuapp.com/api/CustomerBills/'\n\nconst Table = () => {\n    const [employees, setEmployees] = useState([])\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n    const getData = async () => {\n\n        const response = await axios.get(URL)\n        setEmployees(response.data)\n    }\n\n\n    const renderHeader = () => {\n        let headerElement = ['name', 'email', 'phone', 'Edit', \"Download\"]\n\n        return headerElement.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n        })\n    }\n\n    const renderBody = () => {\n        return employees && employees.map(({id, customer_name, email, contact_no }) => {\n            return (\n                <tr key={id}>\n                    {/* <td>{id}</td> */}\n                    <td>{customer_name}</td>\n                    <td>{email}</td>\n                    <td>{contact_no}</td>\n                    <td className='opration'>\n                        <Link to={{ pathname: `/edit/${id}`, state: { prodIndex: {id} }}}><button className='button' >Edit</button></Link>\n                    </td>\n                    <td className='opration'>\n                        \n                        <button className='button' \n                            onClick={(e) => {\n                                e.preventDefault();\n                                window.location.href=`https://invoice-generator-django.herokuapp.com/download/${id}`;\n                            }}>Download </button>\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    return (\n        <>\n            <h1 id='title'><strong>Available Invoices</strong></h1>\n\n            <Button colorScheme=\"green\" size=\"lg\" type=\"submit\" mb={5} onClick={event =>  window.location.href='/add'}>\n                Create New Invoice\n            </Button>\n\n            <table id='employee'>\n                <thead>\n                    <tr>{renderHeader()}</tr>\n                </thead>\n                <tbody>\n                    {renderBody()}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\n\nexport default Table","import './App.css';\nimport AddItem from './components/getItems' \nimport AllCust from './components/AllCustomers'\nimport { createBrowserHistory } from 'history';\n\nimport {\n  ChakraProvider,\n} from '@chakra-ui/react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n// import { browserHistory } from 'react-router-dom'\n\n\nfunction App({props}) {\n\n  // console.log(window.location.pathname);\n  // const hist = createBrowserHistory()\n\n  return (\n      <div className=\"App\">\n        <Router >\n          <div>\n            <Switch>\n\n              <Route exact path=\"/\">\n                <ChakraProvider >\n                  <AllCust />\n                </ChakraProvider > \n              </Route>\n\n              <Route exact path=\"/add\">\n                <ChakraProvider>\n                  <AddItem method=\"GET\"/>\n                </ChakraProvider>\n              </Route>\n\n              <Route path=\"/edit\" >\n                <ChakraProvider>\n                  <AddItem method=\"PUT\" />\n                </ChakraProvider>\n              </Route>\n              \n            </Switch>\n          </div>\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}